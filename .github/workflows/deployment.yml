# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

  
jobs:
  generate-keys:
    name: Generate Keystore and Keys
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Generate Keys
      run: |
        keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000
        # Replace this with the command or script to generate your keys
        # Example: keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000
        
        # Store generated keys as GitHub secrets
        echo "::add-mask::$KEYSTORE_CONTENTS"  # Masking the keystore contents in logs
        echo "::add-mask::$KEYSTORE_PASSWORD"  # Masking the keystore password in logs
        echo "::add-mask::$KEY_ALIAS"  # Masking the key alias in logs
        echo "::add-mask::$KEY_PASSWORD"  # Masking the key password in logs
        echo "KEYSTORE_CONTENTS=$KEYSTORE_CONTENTS" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
        echo "KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
        echo "KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV

      env:
        KEYSTORE_CONTENTS: ${{ secrets.KEYSTORE_CONTENTS }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    - name: Store Generated Keys as Secrets
      run: |
        echo "$KEYSTORE_CONTENTS" | base64 -d > keystore.jks
        echo "::set-secret name=KEYSTORE_CONTENTS::$(base64 keystore.jks | tr -d '\n')"
        echo "::remove-secret name=KEYSTORE_CONTENTS"
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
   
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Download and extract Android SDK
    - name: Download Android SDK
      run: |
          wget -q "https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip" -O android-sdk.zip
          unzip -qq android-sdk.zip -d $HOME/android-sdk

      # Set SDK root and accept Android SDK licenses
    - name: Set SDK root and accept licenses
      run: |
           - export ANDROID_HOME=$PWD/android-sdk-linux
           - yes | android-sdk-linux/tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} --licenses
           - android-sdk-linux/tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools" "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null

      # Install build tools
    - name: Install Build Tools
      run: sdkmanager "build-tools;29.0.3"

          
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
          java-version: '17'
          distribution: 'adopt'

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
          node-version: '20'
          
    - name: Install Dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build Android Release
      run: |
        cd android
        ./gradlew assembleRelease
        
    - name: Echo Directory Structure
      run: ls android
      
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      with:
       releaseDirectory: android/app/release/
       alias: ${{ secrets.KEY_ALIAS }}
       signingKeyBase64: ${{ secrets.KEYSTORE_CONTENTS }}
       keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
       keyPassword: ${{ secrets.KEY_PASSWORD }}
